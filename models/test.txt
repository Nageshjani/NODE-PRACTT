{ app.js
                        import React, {useEffect} from 'react';
                import {BrowserRouter as Router} from 'react-router-dom'
                import {useDispatch, useSelector} from 'react-redux'
                import {dispatchLogin, fetchUser, dispatchGetUser} from './redux/actions/authAction'

                import Header from './components/header/Header'
                import Body from './components/body/Body'
                import axios from 'axios';

                function App() {
                const dispatch = useDispatch()
                const token = useSelector(state => state.token)
                const auth = useSelector(state => state.auth)

                useEffect(() => {
                    const firstLogin = localStorage.getItem('firstLogin')
                    if(firstLogin){
                    const getToken = async () => {
                        const res = await axios.post('/user/refresh_token', null)
                        dispatch({type: 'GET_TOKEN', payload: res.data.access_token})
                    }
                    getToken()
                    }
                },[auth.isLogged, dispatch])

                useEffect(() => {
                    if(token){
                    const getUser = () => {
                        dispatch(dispatchLogin())

                        return fetchUser(token).then(res => {
                        dispatch(dispatchGetUser(res))
                        })
                    }
                    getUser()
                    }
                },[token, dispatch])


                return (
                    <Router>
                    <div className="App">
                        <Header />
                        <Body />
                    </div>
                    </Router>
                );
                }

                export default App;
}

{ index reducer
         import {combineReducers} from 'redux'
        import auth from './authReducer'
        import token from './tokenReducer'
        import users from './usersReducer'

        export default combineReducers({
            auth,
            token,
            users
        })

}


{authReducer
    import ACTIONS from '../actions/'

    const initialState = {
        user: [],
        isLogged: false,
        isAdmin: false
    }

    const authReducer = (state = initialState, action) => {
        switch(action.type){
            case ACTIONS.LOGIN:
                return {
                    ...state,
                    isLogged: true
                }
            case ACTIONS.GET_USER:
                return {
                    ...state,
                    user: action.payload.user,
                    isAdmin: action.payload.isAdmin
                }
            default:
                return state
        }
    }

    export default authReducer
}

{usersReducer
        import ACTIONS from '../actions/'

        const users =[]

        const usersReducer = (state = users, action) => {
            switch(action.type){
                case ACTIONS.GET_ALL_USERS:
                    return action.payload
                default:
                    return state
            }
        }

        export default usersReducer

}

{tokenReducer
        import ACTIONS from '../actions/'

        const token = ''

        const tokenReducer = (state = token, action) => {
            switch(action.type){
                case ACTIONS.GET_TOKEN:
                    return action.payload
                default:
                    return state
            }
        }

        export default tokenReducer

}

{action index
        const ACTIONS = {
            LOGIN: 'LOGIN',
            GET_TOKEN: 'GET_TOKEN',
            GET_USER: 'GET_USER',
            GET_ALL_USERS: 'GET_ALL_USERS'
        }

        export default ACTIONS

}

{authAction
        import ACTIONS from './index'
        import axios from 'axios'

        export const dispatchLogin = () => {
            return {
                type: ACTIONS.LOGIN
            }
        }

        export const fetchUser = async (token) => {
            const res = await axios.get('/user/infor', {
                headers: {Authorization: token}
            })
            return res
        }

        export const dispatchGetUser = (res) => {
            return {
                type: ACTIONS.GET_USER,
                payload: {
                    user: res.data,
                    isAdmin: res.data.role === 1 ? true : false
                }
            }
}
}
{userAction
    import ACTIONS from './index'
    import axios from 'axios'

    export const fetchAllUsers = async (token) => {
        const res = await axios.get('/user/all_infor', {
            headers: {Authorization: token}
        })
        return res
    }

    export const dispatchGetAllUsers = (res) => {
        return {
            type: ACTIONS.GET_ALL_USERS,
            payload: res.data
        }
    }
}

{Body.js
            import React from 'react'
        import {Switch, Route} from 'react-router-dom'
        import Login from './auth/Login'
        import Register from './auth/Register'
        import ActivationEmail from './auth/ActivationEmail'
        import NotFound from '../utils/NotFound/NotFound'

        import ForgotPass from '../body/auth/ForgotPassword'
        import ResetPass from '../body/auth/ResetPassword'

        import Profile from '../body/profile/Profile'
        import EditUser from '../body/profile/EditUser'

        import Home from '../body/home/Home'

        import {useSelector} from 'react-redux'

        function Body() {
            const auth = useSelector(state => state.auth)
            const {isLogged, isAdmin} = auth
            return (
                <section>
                    <Switch>
                        <Route path="/" component={Home} exact />

                        <Route path="/login" component={isLogged ? NotFound : Login} exact />
                        <Route path="/register" component={isLogged ? NotFound : Register} exact />

                        <Route path="/forgot_password" component={isLogged ? NotFound : ForgotPass} exact />
                        <Route path="/user/reset/:token" component={isLogged ? NotFound : ResetPass} exact />

                        <Route path="/user/activate/:activation_token" component={ActivationEmail} exact />

                        <Route path="/profile" component={isLogged ? Profile : NotFound} exact />
                        <Route path="/edit_user/:id" component={isAdmin ? EditUser : NotFound} exact />

                    </Switch>
                </section>
            )
}

export default Body
}

{Header.js
        import React from 'react'
        import {Link} from 'react-router-dom'
        import {useSelector} from 'react-redux'
        import axios from 'axios'


        function Header() {
            const auth = useSelector(state => state.auth)

            const {user, isLogged} = auth


            const handleLogout = async () => {
                try {
                    await axios.get('/user/logout')
                    localStorage.removeItem('firstLogin')
                    window.location.href = "/";
                } catch (err) {
                    window.location.href = "/";
                }
            }

            const userLink = () => {
                return <li className="drop-nav">
                    <Link to="#" className="avatar">
                    <img src={user.avatar} alt=""/> {user.name} <i className="fas fa-angle-down"></i>
                    </Link>
                    <ul className="dropdown">
                        <li><Link to="/profile">Profile</Link></li>
                        <li><Link to="/" onClick={handleLogout}>Logout</Link></li>
                    </ul>
                </li>
            }

            const transForm = {
                transform: isLogged ? "translateY(-5px)" : 0
            }

            return (
                <header>
                    <div className="logo">
                        <h1><Link to="/">DevATâœ®Shop</Link></h1>
                    </div>

                    <ul style={transForm}>
                        <li><Link to="/"><i className="fas fa-shopping-cart"></i> Cart</Link></li>
                        {
                            isLogged
                            ? userLink()
                            :<li><Link to="/login"><i className="fas fa-user"></i> Sign in</Link></li>
                        }
                        
                    </ul>
                </header>
            )
        }

        export default Header
}

{editUser
            import React, {useState, useEffect} from 'react'
        import {useParams, useHistory} from 'react-router-dom'
        import {useSelector} from 'react-redux'
        import axios from 'axios'
        import {showSuccessMsg, showErrMsg} from '../../utils/notification/Notification'


        function EditUser() {
            const {id} = useParams()
            const history = useHistory()
            const [editUser, setEditUser] = useState([])

            const users = useSelector(state => state.users)
            const token = useSelector(state => state.token)

            const [checkAdmin, setCheckAdmin] = useState(false)
            const [err, setErr] = useState(false)
            const [success, setSuccess] = useState(false)
            const [num, setNum] = useState(0)

            useEffect(() => {
                if(users.length !== 0){
                    users.forEach(user => {
                        if(user._id === id){
                            setEditUser(user)
                            setCheckAdmin(user.role === 1 ? true : false)
                        }
                    })
                }else{
                    history.push('/profile')
                }
            },[users, id, history])

            const handleUpdate = async () => {
                try {
                    if(num % 2 !== 0){
                        const res = await axios.patch(`/user/update_role/${editUser._id}`, {
                            role: checkAdmin ? 1 : 0
                        }, {
                            headers: {Authorization: token}
                        })

                        setSuccess(res.data.msg)
                        setNum(0)
                    }
                } catch (err) {
                    err.response.data.msg && setErr(err.response.data.msg)
                }
            }

            const handleCheck = () => {
                setSuccess('')
                setErr('')
                setCheckAdmin(!checkAdmin)
                setNum(num + 1)
            }

            return (
                <div className="profile_page edit_user">
                    <div className="row">
                        <button onClick={() => history.goBack()} className="go_back">
                            <i className="fas fa-long-arrow-alt-left"></i> Go Back
                        </button>
                    </div>

                    <div className="col-left">
                        <h2>Edit User</h2>

                        <div className="form-group">
                            <label htmlFor="name">Name</label>
                            <input type="text" name="name" defaultValue={editUser.name} disabled/>
                        </div>

                        <div className="form-group">
                            <label htmlFor="email">Email</label>
                            <input type="email" name="email" defaultValue={editUser.email} disabled />
                        </div>

                        <div className="form-group">
                            <input type="checkbox" id="isAdmin" checked={checkAdmin}
                            onChange={handleCheck} />
                            <label htmlFor="isAdmin">isAdmin</label>
                        </div>

                        <button onClick={handleUpdate}>Update</button>

                        {err && showErrMsg(err)}
                        {success && showSuccessMsg(success)}
                    </div>
                </div>
            )
        }

        export default EditUser
}

{profile
            import React, {useState, useEffect} from 'react'
        import axios from 'axios'
        import {useSelector, useDispatch} from 'react-redux'
        import {Link} from 'react-router-dom'
        import {isLength, isMatch} from '../../utils/validation/Validation'
        import {showSuccessMsg, showErrMsg} from '../../utils/notification/Notification'
        import {fetchAllUsers, dispatchGetAllUsers} from '../../../redux/actions/usersAction'

        const initialState = {
            name: '',
            password: '',
            cf_password: '',
            err: '',
            success: ''
        }

        function Profile() {
            const auth = useSelector(state => state.auth)
            const token = useSelector(state => state.token)

            const users = useSelector(state => state.users)

            const {user, isAdmin} = auth
            const [data, setData] = useState(initialState)
            const {name, password, cf_password, err, success} = data

            const [avatar, setAvatar] = useState(false)
            const [loading, setLoading] = useState(false)
            const [callback, setCallback] = useState(false)

            const dispatch = useDispatch()

            useEffect(() => {
                if(isAdmin){
                    fetchAllUsers(token).then(res =>{
                        dispatch(dispatchGetAllUsers(res))
                    })
                }
            },[token, isAdmin, dispatch, callback])

            const handleChange = e => {
                const {name, value} = e.target
                setData({...data, [name]:value, err:'', success: ''})
            }

            const changeAvatar = async(e) => {
                e.preventDefault()
                try {
                    const file = e.target.files[0]

                    if(!file) return setData({...data, err: "No files were uploaded." , success: ''})

                    if(file.size > 1024 * 1024)
                        return setData({...data, err: "Size too large." , success: ''})

                    if(file.type !== 'image/jpeg' && file.type !== 'image/png')
                        return setData({...data, err: "File format is incorrect." , success: ''})

                    let formData =  new FormData()
                    formData.append('file', file)

                    setLoading(true)
                    const res = await axios.post('/api/upload_avatar', formData, {
                        headers: {'content-type': 'multipart/form-data', Authorization: token}
                    })

                    setLoading(false)
                    setAvatar(res.data.url)
                    
                } catch (err) {
                    setData({...data, err: err.response.data.msg , success: ''})
                }
            }

            const updateInfor = () => {
                try {
                    axios.patch('/user/update', {
                        name: name ? name : user.name,
                        avatar: avatar ? avatar : user.avatar
                    },{
                        headers: {Authorization: token}
                    })

                    setData({...data, err: '' , success: "Updated Success!"})
                } catch (err) {
                    setData({...data, err: err.response.data.msg , success: ''})
                }
            }

            const updatePassword = () => {
                if(isLength(password))
                    return setData({...data, err: "Password must be at least 6 characters.", success: ''})

                if(!isMatch(password, cf_password))
                    return setData({...data, err: "Password did not match.", success: ''})

                try {
                    axios.post('/user/reset', {password},{
                        headers: {Authorization: token}
                    })

                    setData({...data, err: '' , success: "Updated Success!"})
                } catch (err) {
                    setData({...data, err: err.response.data.msg , success: ''})
                }
            }

            const handleUpdate = () => {
                if(name || avatar) updateInfor()
                if(password) updatePassword()
            }

            const handleDelete = async (id) => {
                try {
                    if(user._id !== id){
                        if(window.confirm("Are you sure you want to delete this account?")){
                            setLoading(true)
                            await axios.delete(`/user/delete/${id}`, {
                                headers: {Authorization: token}
                            })
                            setLoading(false)
                            setCallback(!callback)
                        }
                    }
                    
                } catch (err) {
                    setData({...data, err: err.response.data.msg , success: ''})
                }
            }

            return (
                <>
                <div>
                    {err && showErrMsg(err)}
                    {success && showSuccessMsg(success)}
                    {loading && <h3>Loading.....</h3>}
                </div>
                <div className="profile_page">
                    <div className="col-left">
                        <h2>{isAdmin ? "Admin Profile": "User Profile"}</h2>

                        <div className="avatar">
                            <img src={avatar ? avatar : user.avatar} alt=""/>
                            <span>
                                <i className="fas fa-camera"></i>
                                <p>Change</p>
                                <input type="file" name="file" id="file_up" onChange={changeAvatar} />
                            </span>
                        </div>

                        <div className="form-group">
                            <label htmlFor="name">Name</label>
                            <input type="text" name="name" id="name" defaultValue={user.name}
                            placeholder="Your name" onChange={handleChange} />
                        </div>

                        <div className="form-group">
                            <label htmlFor="email">Email</label>
                            <input type="email" name="email" id="email" defaultValue={user.email}
                            placeholder="Your email address" disabled />
                        </div>

                        <div className="form-group">
                            <label htmlFor="password">New Password</label>
                            <input type="password" name="password" id="password"
                            placeholder="Your password" value={password} onChange={handleChange} />
                        </div>

                        <div className="form-group">
                            <label htmlFor="cf_password">Confirm New Password</label>
                            <input type="password" name="cf_password" id="cf_password"
                            placeholder="Confirm password" value={cf_password} onChange={handleChange} />
                        </div>

                        <div>
                            <em style={{color: "crimson"}}> 
                            * If you update your password here, you will not be able 
                                to login quickly using google and facebook.
                            </em>
                        </div>

                        <button disabled={loading} onClick={handleUpdate}>Update</button>
                    </div>

                    <div className="col-right">
                        <h2>{isAdmin ? "Users" : "My Orders"}</h2>

                        <div style={{overflowX: "auto"}}>
                            <table className="customers">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>Name</th>
                                        <th>Email</th>
                                        <th>Admin</th>
                                        <th>Action</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {
                                        users.map(user => (
                                            <tr key={user._id}>
                                                <td>{user._id}</td>
                                                <td>{user.name}</td>
                                                <td>{user.email}</td>
                                                <td>
                                                    {
                                                        user.role === 1
                                                        ? <i className="fas fa-check" title="Admin"></i>
                                                        : <i className="fas fa-times" title="User"></i>
                                                    }
                                                </td>
                                                <td>
                                                    <Link to={`/edit_user/${user._id}`}>
                                                        <i className="fas fa-edit" title="Edit"></i>
                                                    </Link>
                                                    <i className="fas fa-trash-alt" title="Remove"
                                                    onClick={() => handleDelete(user._id)} ></i>
                                                </td>
                                            </tr>
                                        ))
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
                </>
            )
        }

        export default Profile
}